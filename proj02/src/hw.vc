\import lect \hiding (+,*)
\open Nat -- Здесь лежат + и *.

-- I. Задания на рекурсивные определения.

-- 1. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> a -> a -> a
   if True t _ = t
   if False _ e = e
-}

\func if {A : \Type} (cond : Bool) (then else : A) : A \elim cond
    | true => then
    | false => else

-- 2. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x x y

-- 3. Определите возведение в степень и факториал для натуральных чисел.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
    | 0 => 1
    | 1 => x
    | suc y => x ^ y * x

\func ^Test1 : 2 ^ 3 = 8 => idp
\func ^Test2 : 1 ^ 3 = 1 => idp
\func ^Test3 : 0 ^ 3 = 0 => idp
\func ^Test4 : 2 ^ 0 = 1 => idp

\func fac (x : Nat) : Nat => fac' x 1
  \where
    \func fac' (step acc : Nat) : Nat \elim step
        | 0 => 0
        | 1 => acc
        | suc step => fac' step (acc * (step + 1))

\func facTest1 : fac 0 = 0 => idp
\func facTest2 : fac 1 = 1 => idp
\func facTest3 : fac 2 = 2 => idp
\func facTest4 : fac 4 = 24 => idp

-- 4. Определите mod и gcd.

-- почему-то с полиморфным if не работает
\func mod (x y : Nat) : Nat => mod' x y x \where
    \func mod' (x y step : Nat) : Nat \elim step
        | 0 => 0
        | suc step => if (x < y) x (mod' (x - y) y step)

\func modTest1 : mod 10 5 = 0 => idp
\func modTest2 : mod 10 3 = 1 => idp
\func modTest3 : mod 2 5 = 2 => idp
\func modTest4 : mod 0 5 = 0 => idp
\func modTest5 : mod 1 0 = 0 => idp

\func gcd (x y : Nat) => gcd' x y y \where
    \func gcd' (x y step : Nat) : Nat \elim y, step
        | _, 0 => 0
        | 0, _ => x
        | y, suc step => if (x < y) (gcd' x (mod y x) step) (gcd' y (mod x y) step)


\func gcdTest1 : gcd 10 15 = 5 => idp
\func gcdTest2 : gcd 15 10 = 5 => idp
\func gcdTest3 : gcd 10 10 = 10 => idp
\func gcdTest4 : gcd 11 15 = 1 => idp

-- 5. Определите (полиморфный) reverse для списков.

-- lol, xs ++ ys = [ys, xs]
\func reverse {A : \Type} (list : List A) : List A
    | nil => nil
    | cons a list => (cons a nil) ++ (reverse list)

\func reverseTest1 : reverse {Bool} nil = nil => idp
\func reverseTest2 : reverse (cons 1 nil) = (cons 1 nil) => idp
\func reverseTest3 : reverse (cons 1 (cons 2 nil)) = (cons 2 (cons 1 nil)) => idp

-- 6. Реализуйте любой алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

\func length {A : \Type} (list : List A) : Nat
    | nil => 0
    | cons _ list => 1 + length list

\func testLenght1 : length {Nat} nil = 0 => idp
\func testLenght2 : length (cons 1 nil) = 1 => idp
\func testLenght3 : length (cons 1 (cons 2 nil)) = 2 => idp

\func bublesort {A : \Type } (less : A -> A -> Bool) (list : List A) : List A => bublesort' less list (length list)
  \where
     \func bublesort' {A : \Type } (less : A -> A -> Bool) (list : List A) (i : Nat) : List A \elim i
         | 0 => list
         | suc i => bublesort' less (bublesort'iter less list) i
  \where
    \func bublesort'iter {A : \Type} (less : A -> A -> Bool) (list : List A) : List A \elim list
        | cons x (cons y list) => if (less x y) (cons x (bublesort'iter less (cons y list))) (cons y (bublesort'iter less (cons x list)))
        | list => list

\func testSort : bublesort (<) (cons 10 (cons 4 (cons 5 (cons 1 nil)))) = cons 1 (cons 4 (cons 5 (cons 10 nil))) => idp

-- II. Задания на доказательства.

-- 7. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x && y) && z = x && (y && z) => {?}

\func ||-assoc (x y z : Bool) : (x || y) || z = x || (y || z) => {?}

-- 8. Докажите, что fac 3 равен 6 и что fac 2 не равен 3.

-- 9. Докажите следующие пропозициональные тавтологии.

\data Either (A B : \Type)
  | inl A
  | inr B

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => {?}

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Either P Q) : R => {?}

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => {?}

-- 10. Сформулируйте и докажите следующие пропозициональные тавтологии.

-- t4 : (P -> Q -> R) -> P and Q -> R
-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)
-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q

-- 11. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => {?}

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => {?}

-- 12. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).

-- s4 : Если для всех x : Nat не верно либо P(x), либо Q(x), то P(3) влечет, что Q(3) не верно.

-- III. Задания на модули.

-- 13. Чему равно fileTest (в нормальной форме)? Докажите это.

-- 14. Чему равно M5.t''' (в нормальной форме)? Докажите это.
