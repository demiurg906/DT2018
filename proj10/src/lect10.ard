\import lib10

-- 1. sprintf

\data Inst (lex : \Type)
  | int
  | string
  | const (List lex)

\func Fmt {lex : \Type} (insts : List (Inst lex)) : \Type \elim insts
  | nil => List lex
  | cons inst insts => \case inst \with {
    | int => Int -> Fmt insts
    | string => List lex -> Fmt insts
    | const _ => Fmt insts
  }

\func sprintf {lex : \Type} (showInt : Int -> List lex) (insts : List (Inst lex)) : Fmt insts
  => sprintfAcc showInt nil insts

\func sprintfAcc {lex : \Type} (showInt : Int -> List lex) (acc : List lex) (insts : List (Inst lex)) : Fmt insts \elim insts
  | nil => acc
  | cons int insts => \lam i => sprintfAcc showInt (showInt i ++ acc) insts
  | cons string insts => \lam s => sprintfAcc showInt (s ++ acc) insts
  | cons (const s) insts => sprintfAcc showInt (s ++ acc) insts

-- 2. Тип сортированных списков

\class Poset (A : \Type)
  | \infix 4 <= : A -> A -> \Type
  | refl (x : A) : x <= x
  | trans {x y z : A} (x <= y) (y <= z) : x <= z
  | antiSym (x y : A) : x <= y -> y <= x -> x = y

\data SortedList (A : Poset) : \Type
  | snil
  | scons (x : A) (xs : SortedList A) (h : HeadL x xs)

\data HeadL {A : Poset} (x : A) (xs : SortedList A) : \Type \elim xs
  | snil => nilL
  | scons x' _ _ => consL (x <= {A} x')

\data Either (A B : \Type) | inl A | inr B

\class TotalPoset \extends Poset
  | totality (x y : A) : Either (x <= y) (y <= x)

-- 3. Корректность сортировки.

-- P : (Nat -> Nat) -> \Type
-- P f = (f 3 = 6)
-- P f -> P g -> f = g

-- P : (List A -> List A) -> \Type
-- P f => \Pi (xs : List A) -> \Sigma (isSorted (f xs)) (isPerm (f xs) xs)

