\import lect14
\import lib14 (pmap2)

\func funExt {A : \Type} (B : A -> \Type) {f g : \Pi (a : A) -> B a} (p : \Pi (a : A) -> f a = g a) : f = g
  => path (\lam i => \lam a => p a @ i)

\func equality-isProp {A : \Type} (p : isSet A) (a a' : A) : isProp (a = a') => p a a'
--\func isProp (A : \Type) => \Pi (x y : A) -> x = y

\func prodEq {A B : \Type} (t1 t2 : \Sigma A B) (p : t1.1 = t2.1) (q : t1.2 = t2.2)
  : t1 = t2
  => pmap2 (\lam a b => (a,b)) p q

\func Sigma-isProp {A B : \Type} (pA : isProp A) (pB : isProp B) : isProp (\Sigma A B) =>
  \lam t1 t2 => prodEq t1 t2 (pA _ _) (pB _ _)

\func forall-isProp {A : \Type} (B : A -> \Type) (pB : \Pi (x : A) -> isProp (B x))
  : isProp (\Pi (x : A) -> B x)
  => \lam f1 f2 => funExt B f1 f2 (\lam x => pB x (f1 x) (f2 x))

-- TODO: 1. Докажите, что (n+m)-элементное множество равно размеченному объединению n- и m-элементных множеств.

-- TODO: 2. Докажите, что тип утверждений является множеством.
-- R = a -> b and b -> a
\func prop-isSet : isSet \Prop
  => \let | R (a b : \Prop) => \Sigma (a -> b) (b -> a)
          | R-isProp (a b : \Prop) : isProp (R a b) => Sigma-isProp (forall-isProp (\lam _ => b) (\lam x => Path.inProp)) (forall-isProp (\lam _ => a) (\lam x => Path.inProp))
          | R-isRefl (x : \Prop) : R x x => (\lam a => a, \lam a => a)
          | R-implies= {x y : \Prop} (r : R x y) : x = y => {?}
     \in SetLemma R R-isProp R-isRefl R-implies=

-- 3. Если B x является множеством, то \Pi (x : A) -> B x тоже является множеством.
-- R = \Pi x : A -> f x = g x

\func pi-isSet {A : \Type} (B : A -> \Type) (p : \Pi (x : A) -> isSet (B x)) : isSet (\Pi (x : A) -> B x)
  => \let | F => \Pi (x : A) -> B x
          | R (f g : F) => \Pi (x : A) -> f x = g x
          | R-isProp (f g : F) (p' q' : \Pi (x : A) -> f x = g x) : p' = q'
            => funExt (\lam x => f x = g x) (\lam y => (equality-isProp (p y) (f y) (g y)) (p' y) (q' y))
          | R-isRefl (f : F) : R f f => \lam x => idp
          | R-implies= {f g : F} (r : R f g) : f = g => funExt B r
     \in SetLemma R R-isProp R-isRefl R-implies=

-- 4. Если A и B x являются множествами, то \Sigma (x : A) (B x) тоже является множеством.

\func sigmaEq {A : \Type} (B : A -> \Type) (t1 t2 : \Sigma (x : A) (B x)) (p : t1.1 = t2.1) (q : transport B p t1.2 = t2.2) : t1 = t2
  => J (\lam a' p' => \Pi (b' : B a') (q' : transport B p' t1.2 = b') -> t1 = (a',b'))
       (\lam b' q' => pmap (\lam b'' => ((t1.1,b'') : \Sigma (x : A) (B x))) q')
       p t2.2 q

\func sigmaInc
  {A : \Type} (B : A -> \Prop)
  (t1 t2 : \Sigma (x : A) (B x))
  (p : t1.1 = t2.1)
  : t1 = t2
  => J (\lam a' p' => \Pi (b' : B a') (q' : transport B p' t1.2 = b') -> t1 = (a',b'))
       (\lam b' q' => pmap (\lam b'' => ((t1.1,b'') : \Sigma (x : A) (B x))) q')
       p t2.2 (Path.inProp _ _)

\func depSigmaEq
  {A : \Type} (B : A -> \Type)
  (t1 t2 : \Sigma (x : A) (B x))
  (p : t1.1 = t2.1)
  (q : transport B p t1.2 = t2.2)
  : t1 = t2
  => J (\lam a' p' => \Pi (b' : B a') (q' : transport B p' t1.2 = b') -> t1 = (a',b'))
       (\lam b' q' => pmap (\lam b'' => ((t1.1,b'') : \Sigma (x : A) (B x))) q')
       p t2.2 q

\func sigma-isSet {A : \Type} (B : A -> \Type) (p : isSet A) (q : \Pi (x : A) -> isSet (B x)) : isSet (\Sigma (x : A) (B x))
  => \let | F => \Sigma (x : A) (B x)
          | R (t1 t2 : F) => \Sigma (p' : t1.1 = t2.1) (transport B p' t1.2 = t2.2)
          | R-isProp (t1 t2 : F) (r1 r2 : R t1 t2) : r1 = r2
              => \let | p1 : r1.1 = r2.1 => (equality-isProp p t1.1 t2.1) r1.1 r2.1
                      | p2 : transport (\lam (x : t1.1 = t2.1) => transport B x t1.2 = t2.2) p1 r1.2 = r2.2
                          => \let f => equality-isProp (q t2.1) (transport B r2.1 t1.2) t2.2
                             \in f (transport (\lam (x : t1.1 = t2.1) => transport B x t1.2 = t2.2) p1 r1.2) r2.2
                 \in depSigmaEq {t1.1 = t2.1} (\lam x => transport B x t1.2 = t2.2) r1 r2 p1 p2
          | R-isRefl (f : F) : R f f => (idp, idp)
          | R-implies= {t1 t2 : F} (r : R t1 t2) : t1 = t2 => depSigmaEq B t1 t2 r.1 r.2
     \in SetLemma R R-isProp R-isRefl R-implies=

-- 5. Если A и B являются множествами, то A `Or` B тоже является множеством.

\data \fixr 2 Or (A B : \Type)
  | inl A
  | inr B

\data OrEq {A B : \Type} (or1 or2 : Or A B) \with
  | inl a1, inl a2 => l-eq (a1 = a2)
  | inr b1, inr b2 => r-eq (b1 = b2)

\func or-isSet {A B : \Type} (p : isSet A) (q : isSet B) : isSet (Or A B)
  => \let | F => A `Or` B
          | R (or1 or2 : F) => OrEq or1 or2
          | R-isProp (or1 or2 : F) (p' q' : R or1 or2) : p' = q'
            => \case or1 \as or1', or2 \as or2', p' \as p'' : R or1' or2', q' \as q'' : R or1' or2' \return p'' = q'' \with {
              | inl a1, inl a2, l-eq pa1, l-eq pa2 => pmap l-eq (p a1 a2 pa1 pa2)
              | inr b1, inr b2, r-eq pb1, r-eq pb2 => pmap r-eq (q b1 b2 pb1 pb2)
            }
          | R-isRefl (or : F) : R or or => \case or \as or' \return R or' or' \with {
            | inl a => l-eq idp
            | inr b => r-eq idp
          }
          | R-implies= {or1 or2 : F} (r : R or1 or2) : or1 = or2
            => \case or1 \as or1', or2 \as or2', r : R or1' or2' \return or1' = or2' \with {
              | inl a1, inl a2, l-eq a1=a2 => pmap inl a1=a2
              | inr b1, inr b2, r-eq b1=b2 => pmap inr b1=b2
            }
     \in SetLemma R R-isProp R-isRefl R-implies=

-- 6. Докажите теорему Хедберга, которая говорит, что если равенство на типе разрешимо,
--    то этот тип является множеством.

\truncated \data Trunc (A : \Type) : \Prop
  | in A

\func Hedberg {A : \Type} (p : \Pi (x y : A) -> (x = y) `Or` Not (x = y)) : isSet A
  => \let | R (x y : A) => Trunc (x = y)
          | R-isProp (x y : A) (p' q' : R x y) : p' = q' =>
            \let pp : isProp (R x y) => Path.inProp \in
            \case p x y \as pp \with {
              | inl f => pp p' q'
              | inr f => \case p' \with {
                | in p'' => absurd (f p'')
              }
            }
          | R-isRefl (x : A) : R x x => in idp
          | R-implies= {x y : A} (r : R x y) : x = y => \case p x y \with {
            | inl f => f
            | inr f => absurd (helper f r)
          }
     \in SetLemma R R-isProp R-isRefl R-implies=
  \where \func helper {A : \Type} (f : Not A) : Not (Trunc A) => \lam q => \case q \with {
    | in p => f p
  }

-- TODO: 7. Докажите, что (Bool = Bool) = Bool.

\func id {A : \Type} (x : A) : A => x

\func bbs1 : Equiv Bool Bool => (id, id, \lam _ => idp, \lam _ => idp)
\func bbs2 : Equiv Bool Bool  => (not, not, not-not, not-not)
\func bb1 : Bool = Bool => equivalence=>equality Bool Bool bbs1
\func bb2 : Bool = Bool => equivalence=>equality Bool Bool bbs2

\func prodEq4 {A B C D : \Type} (t1 t2 : \Sigma A B C D) (p1 : t1.1 = t2.1) (p2 : t1.2 = t2.2) (p3 : t1.3 = t2.3) (p4 : t1.4 = t2.4)
  : t1 = t2 => path (\lam i => (p1 @ i, p2 @ i, p3 @ i, p4 @ i))

\func notManyBoolFuns (p : Equiv Bool Bool) : Or (p = bbs1) (p = bbs2) => \case p.1 true \with {
  | true => inl {?}
  | false => inr {?}
}

\func BoolAut : (Bool = Bool) = Bool => equivalence=>equality (Bool = Bool) Bool (f, g, p1, p2)
\where {
  \func f (p : Bool = Bool) : Bool =>
    \case notManyBoolFuns (equality=>equivalence Bool Bool p) \with {
      | inl _ => true
      | inr _ => false
    }
  \func g (b : Bool) : Bool = Bool
    | true => bb1
    | false => bb2
  \func p1 (p : Bool = Bool) : g (f p) = p => {?}
  \func p2 (b : Bool) : f (g b) = b => {?}
}


-- TODO: 8. Тип X называется инъективным, если для любой функции f : A -> X
--    и любой инъекции i : A -> B существует функция l : B -> X такая, что l `o` i = f.
--    Докажите, что \Prop инъективен.

\func isInj {A B : \Type} (f : A -> B) => \Pi (x y : A) -> f x = f y -> x = y

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func isInjective (X : \Type)
  => \Pi {A B : \Type} (f : A -> X) (i : A -> B) (p : isInj i) -> \Sigma (l : B -> X) (l `o` i = f)

-- use propExt
-- сначала решить через исключённое третье (для любого b, у которого есть a достаём прообраз через isInj)
\func Prop-isInjective : isInjective \Prop => func
  \where \func func
    {A B : \Type}
    (f : A -> \Prop)
    (i : A -> B)
    (p : isInj i)
    : \Sigma (l : B -> \Prop ) (l `o` i = f)
    => (
      {?}, -- l : B -> Prop
      {?}  -- \Pi (x : A) -> l (i x) = f
    )