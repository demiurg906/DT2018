\import lect03

-- 1. Докажите ассоциативность ++.

\func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a' => path (\lam i => f (p @ i))

\data List (A : \Type) | nil | cons A (List A)

\func length {A : \Type} (list : List A) : Nat
    | nil => 0
    | cons _ list => suc (length list)

\func \infixr 5 ++ {A : \Type} (xs ys : List A) : List A \elim xs
  | nil => ys
  | cons x xs => cons x (xs ++ ys)

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
    | nil => idp
    | cons x xs => pmap (cons x) (++-assoc xs ys zs)

-- 2. На прошлой лекции мы определяли функцию T : Bool -> \Type рекурсивно.
--    Определите аналогичную функцию индуктивно.

--\data Bool | false | true

\data T (b : Bool) \elim b
    | true => Unit

\func absurd {A : \Type} (t : T false) : A

-- 3. Напишите функцию lookup, которая принимает список и натуральное число и возвращает элемент по заданому индексу.
--    В общем случае эту функцию определить невозможно, т.к. индекс может быть больше, чем число элементов в списке.
--    Поэтому эта функция должна дополнительно еще принимать доказательство того, что индекс находится в допустимых границах, в виде T (length xs < n).

\func \infix 4 < (x y : Nat) : Bool
  | _, 0 => false
  | 0, suc y => true
  | suc x, suc y => x < y

\func lookup {A : \Type} (xs : List A) (i : Nat) (t : T (i < length xs)) : A \elim xs, i
    | nil, i => absurd (helper i t)
    | cons x _, 0 => x
    | cons _ xs, suc i => lookup xs i t
    \where \func helper (i : Nat) (t : T (i < 0)) : T false \elim i
        | 0 => t
        | suc i => t

-- 4. Реализуйте аналоги функции replicate для vec и Vec (эта функция создает список заданной длины, состоящий из повторений данного элемента).

--\func vec (A : \Type) (n : Nat) : \Type \elim n
--    | 0 => \Sigma
--    | suc n => \Sigma A (vec A n)

\func replicate {A : \Type} (n : Nat) (a : A) : vec A n \elim n
    | 0 => ()
    | suc n => (a, replicate n a)


--\data Vec (A : \Type) (n : Nat) \elim n
--    | 0 => fnil
--    | suc n => fcons A (Vec A n)

\func Replicate {A : \Type} (n : Nat) (a : A) : Vec A n \elim n
    | 0 => fnil
    | suc n => fcons a (Replicate n a)

-- 5. Реализуйте аналоги функции map для vec и Vec.

\func map {A B : \Type} (f : A -> B) {n : Nat} (xs : vec A n) : vec B n \elim n, xs
    | 0, () => ()
    | suc n, (x, xs) => (f x, map f xs)

\func Map {A B : \Type} (f : A -> B) {n : Nat} (xs : Vec A n) : Vec B n \elim n, xs
    | 0, fnil => fnil
    | suc n, fcons x xs => fcons (f x) (Map f xs)

-- 6. Реализуйте аналоги функции zipWith для vec и Vec.
--    Функция должна принимать вектора одинаковой длины.

\func zipWith {A B : \Type} {n : Nat} (xs : vec A n) (ys : vec B n) : vec (\Sigma A B) n \elim n, xs, ys
    | 0, (), () => ()
    | suc n, (x, xs), (y, ys) => ((x, y), zipWith xs ys)

\func ZipWith {A B : \Type} {n : Nat} (xs : Vec A n) (ys : Vec B n) : Vec (\Sigma A B) n \elim n, xs, ys
    | 0, fnil, fnil => fnil
    | suc n, fcons x xs, fcons y ys => fcons (x, y) (ZipWith xs ys)

-- 7. Реализуйте Fin как рекурсивную функцию.

-- Неправильно. fin 0 должно быть пустой, а он одноэлементный. Они все одноэлементные.
\func fin (n : Nat) : \Type \elim  n
    | suc n => \Sigma (fin n)
    | 0 => \Sigma

-- 8. Функции Fin n → A соответствуют спискам элементов A длины n.
--    Функция, преобразующая Vec A n в Fin n → A, была реализована на лекции.
--    Реализуйте обратную функцию.

\func coin {A : \Type} {n : Nat} (f : Fin n -> A) : Vec A n \elim n
    | suc n =>
        \let f' (fin : Fin n) : A => f (fsuc fin)
        \in fcons (f fzero) (coin f')
    | 0 => fnil

-- 9. Определите тип матриц и ряд функций над ними.

\func Mat (A : \Type) (n m : Nat) : \Type => Vec (Vec A m) n

-- диагональная матрица с элементами e на диагонали и z на остальных позициях.

\func diag {A : \Type} (z e : A) (n : Nat) : Mat A n n => builder n n z e
  \where \func builder {A : \Type} (n origN : Nat) (z e : A) : Mat A n origN \elim n
    | suc n => fcons (buildRaw n origN z e) (builder n origN z e)
    | 0 => fnil
  \where \func buildRaw {A : \Type} (i n : Nat) (z e : A) : Vec A n \elim n
    | suc n => fcons (if (i == n) e z) (buildRaw i n z e)
    | 0 => fnil

-- транспонирование матриц

\func toFin (n i : Nat) (t : T (i < n)) : Fin n \elim n, i
    | suc n, suc i => fsuc (toFin n i t)
    | suc n, 0 => fzero
    | 0, suc i => absurd t
    | 0, 0 => absurd t

-- TODO
\func transpose {A : \Type} {n m : Nat} (M : Mat A n m) : Mat A m n => {?}

-- сложение матриц

\func matAdd {A : \Type} (add : A -> A -> A) {n m : Nat} (M N : Mat A n m) : Mat A n m \elim M, N
    | fcons rowM M, fcons rowN N => fcons (vecAdd add rowM rowN) (matAdd M N)
    | fnil, fnil => fnil
  \where
    \func vecAdd {A : \Type} (add : A -> A -> A) {n : Nat} (xs ys : Vec A n) : Vec A n \elim xs, ys
        | fcons x xs, fcons y ys => fcons (add x y) (vecAdd xs ys)
        | fnil, fnil => fnil

-- умножение матриц

-- z ─ нейтральный элемент по сложению.
-- TODO
\func matMul {A : \Type} (z : A) (add mul : A -> A -> A) (n m k : Nat) (M : Mat A n m) (N : Mat A m k) : Mat A n k => {?}

-- 10. Определите тип CTree A n бинарных деревьев высоты ровно n, которые хранят элементы только во внутренних узлах, но не в листьях.
--     Любое такое бинарное дерево будет полным.

\data CTree (A : \Type) (n : Nat) \elim n
    | 0 => cLeaf
    | suc n => cNode A (CTree A n) (CTree A n)

-- 11. Определите тип Tree A n бинарных деревьев высоты не больше n, которые хранят элементы только во внутренних узлах, но не в листьях.

\data Tree (A : \Type) (n : Nat) \elim n
    | suc n => { | middleLeaf | node A (Tree A n) (Tree A n) }
    | 0 => leaf

-- определите функцию, возвращающую высоту дерева.

\func max {N : Nat} (n m : Fin N) : Fin N => if ((toNat n) < (toNat m)) m n

\func height {A : \Type} (n : Nat) (t : Tree A n) : Fin (suc n) \elim n, t
    | suc n, node _ t1 t2 => fsuc (max (height n t1) (height n t2))
    | suc n, middleLeaf => fzero
    | 0, _ => fzero
