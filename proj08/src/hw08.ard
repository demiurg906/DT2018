\import lib08
\import lect08
\open Nat

-- 1. Укажите явно чему равен уровень в каждом из вызовов id' ниже.
--    Напишите явно чему равны типы всех функций idTest*.

\func id' {A : \Type} (a : A) : A => a

\func idTest1 : \Pi (A : \Type \lp) -> A -> A => id' {\Pi (A : \Type \lp) -> A -> A} (id' {\Pi (A : \Type \lp) -> A -> A} id)
\func idTest2 : \Type \lp -> \Type \lp => id' {\Type \lp -> \Type \lp} Maybe
\func idTest3 : \Type (\suc \lp) => id' {\Type \suc \lp} Functor
\func idTest4 : \Type (\suc \lp) => id' {\Type \suc \lp} (Functor Maybe)
\func idTest5 (f : \Pi {A B : \Type} -> (A -> B) -> Maybe A -> Maybe B) : \Type \lp => id' {\Type \lp} (Functor Maybe f)

-- 2. Определите предикат принадлежности элемента списку.

\data List (A : \Type) | nil | cons A (List A)

\data In {A : \Type} (a : A) (xs : List A) \elim xs
    | cons x xs => in-elem (x = a)
    | cons x xs => in-cons (In a xs)

-- 3. Докажите эквивалентность пяти различных определений LessOrEq:
--   lessOrEq (1), LessOrEq (2), LessOrEq' (3), LessOrEq'' (4) и LessOrEq''' (5).

-- 1 -> 2 -> 4 -> 5 -> 1
-- 2 -> 3 -> 1

\func eq-1->2 {n m : Nat} (p : lessOrEq n m) : LessOrEq n m \elim n, m
  | 0, m => z<=n
  | suc n, 0 => absurdEmpty p
  | suc n, suc m => s<=s (eq-1->2 p)

\func eqAbsurd {n : Nat} (p : LessOrEq (suc n) 0) : Empty

\func eq-2->3 {n m : Nat} (p : LessOrEq n m) : LessOrEq' n m \elim n, m, p
  | 0, m, _ => z<=n' idp
  | suc n, 0, p => absurdEmpty (eqAbsurd p)
  | suc n, suc m, s<=s p => s<=s' idp idp (eq-2->3 p)

\func eq-2->4 {n m : Nat} (p : LessOrEq n m) : LessOrEq'' n m \elim n, m, p
  | 0, 0, _ => <=-refl idp
  | 0, suc m, _ => <=-step (eq-2->4 z<=n)
  | suc n, 0, p => absurdEmpty (eqAbsurd p)
  | suc n, suc m, (s<=s p) => sucLessOrEq'' (eq-2->4 p)
  \where
    \func sucLessOrEq'' {n m : Nat} (p : LessOrEq'' n m) : LessOrEq'' (suc n) (suc m) \elim m, p
      | suc m, <=-step p => <=-step (sucLessOrEq'' p)
      | m, <=-refl p => <=-refl (pmap suc p)

\func eq-3->1 {n m : Nat} (p : LessOrEq' n m) : lessOrEq n m \elim n, m, p
  | 0, 0, _ => unit
  | 0, suc m, z<=n' p => unit
  | 0, suc m, s<=s' p _ _ => absurdEmpty (zero/=suc p)
  | suc n, 0, z<=n' p => absurdEmpty (suc/=0 p)
  | suc n, 0, s<=s' _ p _ => absurdEmpty (zero/=suc p)
  | suc n, suc m, z<=n' p => absurdEmpty (suc/=0 p)
  | suc n, suc m, s<=s' pn pm p => helper (pmap pred pn) (pmap pred pm) (eq-3->1 p)
  \where
    \func helper {n n' m m' : Nat} (pn : n' = n) (pm : m' = m) (p : lessOrEq n m) : lessOrEq n' m' \elim n, n', m, m'
      | 0, 0, 0, 0 => p
      | 0, 0, suc m, suc m' => p
      | suc n, suc n', 0, 0 => p
      | suc n, suc n', suc m, suc m' => helper (pmap pred pn) (pmap pred pm) p
      | suc n, 0, _, _ => absurdEmpty (zero/=suc pn)
      | 0, suc n', _, _ => absurdEmpty (suc/=0 pn)
      | _, _, suc m, 0 => absurdEmpty (zero/=suc pm)
      | _, _, 0, suc m' => absurdEmpty (suc/=0 pm)

\func zero+n=n {n : Nat} (p : n = n) : (0 + n) = n \elim n
  | 0 => idp
  | suc n => pmap suc (zero+n=n (pmap pred p))

\func n=zero+n {n : Nat} (p : (0 + n) = n) : n = n \elim n
  | 0 => idp
  | suc n => pmap suc (n=zero+n (pmap pred p))

\func eq-4->5 {n m : Nat} (p : LessOrEq'' n m) : LessOrEq''' n m \elim m, p
  | 0, <=-refl p => (0, helper p)
  | suc m, <=-refl p => (0, helper p)
  | suc m, <=-step p => \let kp => eq-4->5 p \in (suc (kp.1), suc_[k+b]=suc_k+b (pmap suc kp.2))
  \where
    \func helper {n m : Nat} (p : n = m) : 0 + n = m => trans (zero+n=n idp) p

\func eq-5->1 {n m : Nat} (p : LessOrEq''' n m) : lessOrEq n m \elim n, m, p
  | 0, _, _ => unit
  | suc n, 0, (k, p) => suc+/=0 (suc_[k+b]=suc_k+b p)
  | suc n, suc m, (k, p) => eq-5->1 (k, helper1 (suc_[k+b]=suc_k+b p))
  \where
    \func helper2 (n m : Nat) : suc (n + m) = suc n + m \elim m
      | 0 => idp
      | suc m => pmap suc (helper2 n m)
    \func helper1 {n m k : Nat} (p : suc n + k = suc m) : n + k = m \elim k
      | 0 => pmap pred p
      | suc k => (
        suc (n + k)
      ==< eq-5->1.helper2 n k >==
        suc n + k
      ==< pmap pred p >==
        m
        `qed
      )

-- 4. Определите рефлексивное транзитивное замыкание отношения.
--    То есть ReflTransClosure R -- это минимальное рефлексивное и
--    транзитивное отношение, содержащее R.

\data ReflTransClosure {A : \Type} (R : A -> A -> \Type) (x y : A)
  | closure (R' : A -> A -> \Type)
            (refl : \Pi (x' : A) -> R' x' x')
            (trans : \Pi (x' y' z' : A) -> R' x' y' -> R' y' z' -> R' x' z')
            (eq : R x y -> R' x y)
            (back : R' x y -> R x y)
            (elem : R' x y)

-- 5. Докажите, что если R уже рекфлексивно и транзитивно,
--   то ReflTransClosure R эквивалентно R.

\func \infix 4 <-> {A : \Type} (P Q : A -> A -> \Type) => \Pi (x y : A) -> \Sigma (P x y -> Q x y) (Q x y -> P x y)

\func ReflTransClosure-lem {A : \Type} (R : A -> A -> \Type)
    (refl : \Pi (x : A) -> R x x)
    (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z)
    : R <-> ReflTransClosure R
    => \lam (x y : A) => (
        \lam r => closure R refl trans id id r,
        \lam r' => \case r' \with {
          | closure _ _ _ _ back elem => back elem
        }
    )
    \where \func id {A : \Type} (x : A) => x

-- 6. Определите предикат xs <= ys на списках, означающий "список xs является подсписком ys".

\data Sublist {A : \Type} (xs ys : List A) \elim xs, ys
  | cons x xs, cons y ys => {
    | sublist-contains (x = y) (Sublist xs ys)
    | sublist-next (Sublist (cons x xs) ys)
  }
  | nil, ys => sublist-nil

\func \infixl 6 <= {A : \Type} (xs ys : List A) => Sublist xs ys

-- 7. Докажите, что filter xs <= xs для любого списка xs.

\func filter {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => \case p x \with {
    | true => cons x (filter p xs)
    | false => filter p xs
  }

\func sublist-expand {A : \Type} {xs ys : List A} (p : xs <= ys) (y' : A) : xs <= cons y' ys \elim xs, ys, p
  | cons x xs, cons y ys, p => sublist-next p
  | nil, ys, sublist-nil => sublist-nil

\func filter-sublist {A : \Type} (p : A -> Bool) (xs : List A) : (filter p xs) <= xs \elim xs
  | cons x xs => \case p x \as b \return (\case b \with { | false => filter {A} p xs | true => cons x (filter p xs)}) <= (cons x xs) \with {
    | true => sublist-contains idp (filter-sublist p xs)
    | false => \let t => filter-sublist p xs \in sublist-expand t x
  }
  | nil => sublist-nil
