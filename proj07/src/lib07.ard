\import lect07
\open Nat

\func Tabsurd (t : T false) : Empty

\func true/=false (p : true = false) : Empty => Tabsurd (transport T p tt)

\func false/=true (p : false = true) : Empty => true/=false (sym p)

\func absurdEmpty {A : \Type} (e : Empty) : A

\func n<0 {n : Nat} (p : true = n < 0) : Empty \elim n
  | 0 => true/=false p
  | suc n => true/=false p

-- true = n < m + 1
-- n >= m <==> false = n < m
\func m-n-m+1 {n m : Nat} (p : true = n < suc m) (p' : false = n < m) : n = m \elim n, m
  | 0, 0 => idp
  | 0, suc m => absurdEmpty (false/=true p')
  | suc n, 0 => absurdEmpty (n<0 p)
  | suc n, suc m => pmap suc (m-n-m+1 p p')\func trans {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
    => transport (\lam x => a = x) q p

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b'
    => trans
        (transport (\lam y => f a b  = f a y ) q idp) -- f a b = f a b'
        (transport (\lam x => f a b' = f x b') p idp) -- f a b' = f a' b'

\func funExt {A : \Type} (B : A -> \Type) {f g : \Pi (a : A) -> B a} (p : \Pi (a : A) -> f a = g a) : f = g
    => path (\lam i => \lam a => p a @ i)

--------------------------------------------

\func \infixr 5 *> {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
  => transport (\lam x => a = x) q p

\func \infix 2 qed {A : \Type} (a : A) : a = a => idp

\func \infixr 1 >== {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') => p *> q

\func \infix 2 ==< {A : \Type} (a : A) {a' : A} (p : a = a') => p

--------------------------------------------

\func +-assoc (x y z : Nat) : (x + y) + z = x + (y + z) \elim z
  | zero => idp
  | suc z => pmap suc (+-assoc x y z)

\func +-comm (n m : Nat) : n + m = m + n
  | 0, 0 => idp
  | 0, suc m => pmap suc (+-comm 0 m)
  | suc n, 0 => pmap suc (+-comm n 0)
  | suc n, suc m => pmap suc (+-comm (suc n) m *> pmap suc (sym (+-comm n m)) *> +-comm n (suc m))

\func +0-right (n : Nat) : n + 0 = n \elim n
  | suc n => idp
  | 0 => idp

\func +0-left (n : Nat) : 0 + n = n \elim n
  | suc n => pmap suc (+0-left n)
  | 0 => idp

\func *0-right (n : Nat) : n * 0 = 0 \elim n
  | suc n => idp
  | 0 => idp

\func *0-left (n : Nat) : 0 * n = 0 \elim n
  | suc n => *0-left n
  | 0 => idp

\func *-ldistr (n m k : Nat) : n * (m + k) = n * m + n * k \elim k
    | 0 => idp
    | suc k => pmap (\lam x => x + n) (*-ldistr n m k) *> (+-assoc (n * m) (n * k) n)

\func *-rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
    | 0 => idp
    | suc n => (
        (m + k) * (suc n)
      ==< sym (+-assoc ((m + k) * n) m k) >==
        (m + k) * n + m + k
      ==< pmap (\lam x => x + m + k) (*-rdistr n m k) >==
        m * n + k * n + m + k
      ==< pmap (\lam x => x + k) (+-assoc (m * n) (k * n) m) >==
        m * n + (k * n + m) + k
      ==< pmap (\lam x => m * n + x + k) (+-comm (k * n) m) >==
        m * n + (m + k * n) + k
      ==< pmap (\lam x => x + k) (sym (+-assoc (m * n) m (k * n))) >==
        m * n + m + k * n + k
      ==< +-assoc (m * n + m) (k * n) k >==
        (m * n + m) + (k * n + k)
      ==< idp >==
        m * (suc n) + k * (suc n)
      `qed
    )

\func +-abc=acb (a b c : Nat) : a + b + c = a + c + b => (
   a + b + c
 ==< +-assoc a b c >==
   a + (b + c)
 ==< pmap (\lam x => a + x) (+-comm b c) >==
   a + (c + b)
 ==< sym (+-assoc a c b) >==
   a + c + b
 `qed
)

\func *+1 (n m : Nat) : n * m + m = (suc n) * m \elim m
  | 0 => idp
  | suc m => pmap suc (
    n * m + n + m
  ==< +-abc=acb (n * m) n m >==
    n * m + m + n
  ==< pmap (\lam x => x + n) (*+1 n m) >==
    suc n * m + n
  `qed
  )

--------------------------------------------

\func \infixl 4 ++ {A : \Type} (xs ys : List A) : List A \elim xs
  | nil => ys
  | cons x xs => cons x (xs ++ ys)

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | cons x xs => reverse xs ++ cons x nil

\func ++nil {A : \Type} (xs : List A) : xs ++ nil = xs
    | nil => idp
    | cons x xs => pmap (\lam xs => cons x xs) (++nil xs)

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
    | nil => idp
    | cons x xs => pmap (cons x) (++-assoc xs ys zs)